# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# trigger is the branch this pipeline will be pointing to
trigger:
- master

#Configured Build Server from Nick's VM. By default the Default points to empty server, so use Microsoft hosted Agents
pool : Default

# - dev
# - staging

# 
# pool:
#   vmImage: 'ubuntu-latest'



variables:
  buildConfiguration: 'Release'
  pathtosolution: '03-MVC/ContactApp/'
  pathtoproject: '03-MVC/ContactApp/Web'
  pathtotest: '03-MVC/ContactApp/Test'

steps:
# SONAR PREPARE ANALYSIS CONFIG
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'ContactAppSonarCloud'
    organization: '1905-may06-dotnet'
    scannerMode: 'MSBuild'
    projectKey: 'ContactAppUta'
    projectName: 'ContactAppUta'
    extraProperties: |
      sonar.cs.opencover.reportsPaths="$(Build.ArtifactStagingDirectory)/coverage/*"
      sonar.cs.vstest.reportsPaths="$(Build.ArtifactStagingDirectory)/test/*.trx"
  displayName: 'Sonar Prepare Analysis'

# BUILD:
- script: dotnet build --configuration $(buildConfiguration)
  workingDirectory: $(pathtosolution)
  displayName: 'dotnet build $(buildConfiguration)'

# BASIC TEST
- script: dotnet test
   --configuration $(buildConfiguration)
   --logger trx
   --no-build
   --results-directory $(Build.ArtifactStagingDirectory)/test/
    /p:CollectCoverage=true
    /p:CoverletOutputFormat=opencover
    /p:CoverletOutput='$(Build.ArtifactStagingDirectory)/coverage/'
  workingDirectory: $(pathtosolution)
  displayName: 'dotnet Test'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '*.trx'
    searchFolder: '$(Build.ArtifactStagingDirectory)/test'
  displayName: 'Publish test results '

# PUBLISH THE BUILD FILES
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: $(pathtoproject)/*.csproj
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    publishWebProjects: false
  displayName: 'dotnet publish'

# PUBLISH BUILD ARTIFACTS
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish build artifacts'

# 1. hello world message to check the server is live(check heartbeat)
# - script: hello world!

# 2. Make a dotnet build-> Ctrl+shift+B
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'
#   workingDirectory: $(pathtosolution)

# 3. dotnet publish -> to package the binaries in a folder
# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     projects: '$(pathtoproject)/*.csproj'

# 4. task to deploy app on the azure server
# - task: AzureRmWebAppDeployment@4
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: 'Visual Studio Enterprise with MSDN(581982a8-2cbb-485e-b313-4da4b27d42f1)'
#     appType: 'webApp'
#     WebAppName: 'contactapputa'
#     packageForLinux: '$(System.DefaultWorkingDirectory)/$(pathtoproject)/**/*.zip'


